# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)

# this run definition will be choosen if no parameters are given to rebench.py
default_experiment: all
default_data_file: 'benchmarks.data'

runs:
    invocations: 1
    iterations: 100
    min_iteration_time: 100
    
.iteration_numbers:
    fast_vm_macro:      &FAST_VM_MACRO      1500
    slow_vm_macro:      &SLOW_VM_MACRO      800
    fast_vm_micro:      &FAST_VM_MICRO      800
    slow_vm_micro:      &SLOW_VM_MICRO      400

# Codespeed Reporting
reporting:
    codespeed:
        project: RIR
        url: http://rflies.rir.o1o.ch/result/add/json/

# definition of benchmark suites
benchmark_suites:
    are-we-fast-java:
        gauge_adapter: RebenchLog
        location: Benchmarks/AreWeFast/benchmarks/Java
        command: " -cp benchmarks.jar Harness %(benchmark)s %(variable)s "
        iterations: *FAST_VM_MACRO ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: &AWF
            - DeltaBlue:
                extra_args: 12000
            - Richards:
                extra_args: 100
            - Json:
                extra_args: 100
            - CD:
                extra_args: 100
            - Havlak:
                extra_args: 1500
            
            - Bounce:
                extra_args: 1500
            - List:
                extra_args: 1500
            - Mandelbrot:
                extra_args: 500
            - NBody:
                extra_args: 250000
            - Permute:
                extra_args: 1000
            - Queens:
                extra_args: 1000
            - Sieve:
                extra_args: 3000
            - Storage:
                extra_args: 1000
            - Towers:
                extra_args: 600    

    are-we-fast-r:
        gauge_adapter: RebenchLog
        location: Benchmarks/AreWeFast/benchmarks/R
        command: " harness.r %(benchmark)s %(iterations)s "
        iterations: 10 ## the number iterations measured
        max_invocation_time: 6000
        benchmarks:
            - Mandelbrot:
                extra_args: 500
                codespeed_name: "[awf] mandel"
            - Bounce:
                extra_args: 1500
                codespeed_name: "[awf] bounce"
            - Storage:
                extra_args: 1000
                codespeed_name: "[awf] store"

    shootout:
        gauge_adapter: RebenchLog
        location: Benchmarks/shootout
        command: "harness.r %(benchmark)s %(iterations)s "
        iterations: 10  # the number iterations measured
        max_invocation_time: 6000
        benchmarks:  # extra_args: benchmarkParameter [innerIterations]
            - binarytrees:
                extra_args: 13
                codespeed_name: "[shoot] bintree"
            - binarytrees_2:
                extra_args: 13
                codespeed_name: "[shoot] bintree2"
            - binarytrees_naive:
                extra_args: 13
                codespeed_name: "[shoot] bintree_n"
            - fannkuchredux:
                extra_args: 9
                codespeed_name: "[shoot] fannk"
            - fannkuchredux_naive:
                extra_args: 9
                codespeed_name: "[shoot] fannk_n"
            - fasta:
                extra_args: 150000
                codespeed_name: "[shoot] fasta"
            - fasta_2:
                extra_args: 150000
                codespeed_name: "[shoot] fasta2"
            - fasta_3:
                extra_args: 150000
                codespeed_name: "[shoot] fasta3"
            - fasta_naive:
                extra_args: 150000
                codespeed_name: "[shoot] fasta_n"
            - fasta_naive_2:
                extra_args: 150000
                codespeed_name: "[shoot] fasta_n2"
            - fastaredux:
                extra_args: 150000
                codespeed_name: "[shoot] fasta_r"
            - fastaredux_naive:
                extra_args: 150000
                codespeed_name: "[shoot] fasta_n_r"
            - knucleotide:
                extra_args: 10000
                codespeed_name: "[shoot] knucleo"
            - knucleotide_brute:
                extra_args: 3000
                codespeed_name: "[shoot] knucleo_b"
            - knucleotide_brute_2:
                extra_args: 3000
                codespeed_name: "[shoot] knucleo_b2"
            - knucleotide_brute_3:
                extra_args: 3000
                codespeed_name: "[shoot] knucleo_b3"
            - mandelbrot_ascii:
                extra_args: 3000
                codespeed_name: "[shoot] mandel_a"
            - mandelbrot_naive:
                extra_args: 400
                codespeed_name: "[shoot] mandel_n"
            - mandelbrot_naive_ascii:
                extra_args: 400
                codespeed_name: "[shoot] mandel_n_a"
            - mandelbrot_noout:
                extra_args: 3000
                codespeed_name: "[shoot] mandel_no"
            - mandelbrot_noout_naive:
                extra_args: 1500
                codespeed_name: "[shoot] mandel_n_no"
            - mandelbrot_orig:
                extra_args: 3000
                codespeed_name: "[shoot] mandel"
            - nbody:
                extra_args: 50000
                codespeed_name: "[shoot] nbody"
            - nbody_2:
                extra_args: 50000
                codespeed_name: "[shoot] nbody2"
            - nbody_3:
                extra_args: 50000
                codespeed_name: "[shoot] nbody3"
            - nbody_naive:
                extra_args: 50000
                codespeed_name: "[shoot] nbody_n"
            - nbody_naive_2:
                extra_args: 50000
                codespeed_name: "[shoot] nbody_n2"
            - pidigits:
                extra_args: 150
                codespeed_name: "[shoot] pidig"
            - regexdna:
                extra_args: 500000
                codespeed_name: "[shoot] regex"
            - reversecomplement:
                extra_args: 500000
                codespeed_name: "[shoot] revcom"
            - reversecomplement_2:
                extra_args: 500000
                codespeed_name: "[shoot] revcom2"
            - reversecomplement_naive:
                extra_args: 300000
                codespeed_name: "[shoot] revcom_n"
            - spectralnorm:
                extra_args: 1000
                codespeed_name: "[shoot] specnorm"
            - spectralnorm_alt:
                extra_args: 4000
                codespeed_name: "[shoot] specnorm_a"
            - spectralnorm_alt_2:
                extra_args: 1000
                codespeed_name: "[shoot] specnorm_a2"
            - spectralnorm_alt_3:
                extra_args: 250
                codespeed_name: "[shoot] specnorm_a3"
            - spectralnorm_alt_4:
                extra_args: 250
                codespeed_name: "[shoot] specnorm_a4"
            - spectralnorm_math:
                extra_args: 1000
                codespeed_name: "[shoot] specnorm_m"
            - spectralnorm_naive:
                extra_args: 250
                codespeed_name: "[shoot] specnorm_n"

    are-we-fast-js:
        gauge_adapter: RebenchLog
        location: Benchmarks/AreWeFast/benchmarks/JavaScript
        command: "harness.js %(benchmark)s %(variable)s "
        iterations: *FAST_VM_MACRO ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *AWF

    are-we-fast-st:
        gauge_adapter: RebenchLog
        location: Benchmarks/AreWeFast/benchmarks/Smalltalk
        command: "AWFY_Pharo.image run.st %(benchmark)s %(variable)s "
        iterations: *FAST_VM_MACRO ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *AWF
             
# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    CUSTOM-GNU-R:
        path: "Implementations/R/RIR/external/custom-r/bin"
        binary: "Rscript"
        args: ""
        environment: "R_ENABLE_JIT=3" 
    GNU-R:
        path: "Implementations/R/RIR/external/vanilla-r/bin"
        binary: "Rscript"
        args: ""
        environment: "R_ENABLE_JIT=3"
    RIR:
        path: "Implementations/R/RIR/bin/"
        binary: "Rscript"
        args: ""
        environment: "PIR_ENABLE=off R_ENABLE_JIT=3"
    PIR:
        path: "Implementations/R/RIR/bin/"
        binary: "Rscript"
        args: ""
        environment: "R_ENABLE_JIT=3"
    Java:
        path: &IMPLEMENTATIONS_PATH Implementations
        binary: java8.sh
#        args: "-Xms2048m -server "
    Node:
        path: *IMPLEMENTATIONS_PATH
        binary: node.sh
    Pharo:
      path: "Implementations/pharo"
      binary: pharo
                
# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    AreWeFast:
        data_file: areWeFast.data
        executions:
          - RIR:
              suites:
                - are-we-fast-r
                - shootout
          - PIR:
              suites:
                - are-we-fast-r
                - shootout
          - CUSTOM-GNU-R:
              suites:
                - are-we-fast-r
                - shootout
          - GNU-R:
              suites:
                - are-we-fast-r
                - shootout                
#          - Java:
#              suites:
#                - are-we-fast-java
#          - Node:
#              suites:
#                - are-we-fast-js
#          - Pharo:
#              suites:
#                - are-we-fast-st
